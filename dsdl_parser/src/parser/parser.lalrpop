use std::str::FromStr;

use lalrpop_util;

use parser::lexer;
use parser::lexer::Token;

use parser::error::ParseError;
use parser::error::ParseErrorKind;

use {
    Comment,
    Ident,
    Sign,
    Lit,
    PrimitiveType,
    CastMode,

    ArrayInfo,
    AttributeDefinition,
    Directive,
    TypeDefinition,
    MessageDefinition,
    ServiceDefinition,
    FieldDefinition,
    ConstDefinition,
    Line,
    Ty,
    CompositeType,
};

grammar<'err>(errors: &'err mut Vec<ParseError>);

extern {

    type Location = usize;
    type Error = ParseError;

    enum lexer::Token {
        // Tokens
        comment => Token::Comment(<Comment>),
        ident => Token::Ident(<Ident>),
        lit => Token::Lit(<Lit>),
        primitive_type => Token::PrimitiveType(<PrimitiveType>),
        "@" => Token::DirectiveMarker,
        cast_mode => Token::CastMode(<CastMode>),
        "[" => Token::LeftBracket,
        "]" => Token::RightBracket,
        "<" => Token::Less,
        "<=" => Token::LessEq,
        "=" => Token::Eq,
        "---" => Token::ServiceResponseMarker,
        eol => Token::Eol,
    }
}

// This is just an assumption of what will be supported as directive arguments. Nothing is actually specified to this.
DirectiveArgument: Token = {
    ident => Token::Ident(<>),
    lit => Token::Lit(<>),
    primitive_type => Token::PrimitiveType(<>),
}

Size: u64 = {
    lit =>
        if let Lit::Dec{sign: Sign::Implicit, value: v} = <> {
            u64::from_str(&v).unwrap()
        } else {
            unimplemented!("TODO: Insert error handling (only implicit sign dec literals are valid size)")
        },
}

pub(crate) ArrayInfo: ArrayInfo = {
    "[" <Size> "]" => ArrayInfo::Static(<>),
    "[" "<" <Size> "]" => ArrayInfo::DynamicLess(<>),
    "[" "<=" <Size> "]" => ArrayInfo::DynamicLeq(<>),
}

// FIX: User errors cannot be used for error recovery until lalrpop is fixed. Return Result untill then
pub(crate) Directive: Result<Directive, ParseError> = {
    "@" <ident:ident> <args:DirectiveArgument*> => {
        match ident.as_ref() {
            "union" => Ok(Directive::Union),
            _ => Err(ParseError::new(ParseErrorKind::UnknownDirectiveName(ident), None))
        }
    }
}

pub(crate) FieldDefinition: FieldDefinition = {
    <cast_mode:cast_mode?> <field_type:primitive_type> <array:ArrayInfo?> <name:ident?> => FieldDefinition{cast_mode, field_type: Ty::from(field_type), array, name},
    <cast_mode:cast_mode?> <field_type:ident> <array:ArrayInfo?> <name:ident?> => FieldDefinition{cast_mode, field_type: Ty::from(CompositeType::from_str(field_type.as_ref()).expect("TODO: Insert error handling (x not valid typename)")), array, name},
}

pub(crate) ConstDefinition: ConstDefinition = {
    <cast_mode:cast_mode?> <field_type:primitive_type> <name:ident> "=" <literal:lit> => ConstDefinition{cast_mode, field_type: Ty::from(field_type), name, literal},
}

pub(crate) AttributeDefinition: AttributeDefinition = {
    ConstDefinition => AttributeDefinition::Const(<>),
    FieldDefinition => AttributeDefinition::Field(<>),
}

pub(crate) Line: Option<Line> = {
    <comment> eol => Some(Line::Comment(<>)),
    <directive_res:Directive> <comment:comment?> eol => {
        match directive_res {
            Ok(directive) => Some(Line::Directive{directive, comment}),
            Err(e) => {
                errors.push(e);
                None
            },
        }
    },
    <definition:AttributeDefinition> <comment:comment?> eol => Some(Line::Definition{definition, comment}),
    eol => Some(Line::Empty),

    <err:!> => {
        errors.push(err.error.into());
        None
    },
}

pub(crate) MessageDefinition: Option<MessageDefinition> = {
    <Line*> => {
        if <>.iter().any(|x| x.is_none()) {
            None
        } else {
            Some(MessageDefinition(<>.into_iter().map(|x| x.unwrap()).collect()))
        }
    }
}

pub(crate) ServiceDefinition: Option<ServiceDefinition> = {
    <request_opt:MessageDefinition> "---" eol <response_opt:MessageDefinition> => Some(ServiceDefinition{request: request_opt?, response: response_opt?}),
}

pub(crate) TypeDefinition: TypeDefinition = {
    ServiceDefinition =>? Ok(TypeDefinition::from(<>.ok_or(lalrpop_util::ParseError::from(ParseError::new(ParseErrorKind::InvalidTypeDefinition, None)))?)),
    MessageDefinition =>? Ok(TypeDefinition::from(<>.ok_or(lalrpop_util::ParseError::from(ParseError::new(ParseErrorKind::InvalidTypeDefinition, None)))?)),
}
